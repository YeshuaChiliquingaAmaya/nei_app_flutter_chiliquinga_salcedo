import 'package:latlong2/latlong.dart';
import 'package:geolocator/geolocator.dart';
// --> CORRECCI√ìN 1: Se importa 'path_finder.dart' para que la clase reconozca 'Node'.
// Aseg√∫rate de que la ruta al archivo sea la correcta para tu proyecto.
// Si 'chatbot_service.dart' est√° en una carpeta 'lib/chatbot', la ruta '../path_finder.dart' es correcta.
import '../path_finder.dart';

class ChatbotEvacuacionESPE {
  final PathFinder? pathFinder;
  // --> CORRECCI√ìN 2: 'userLocation' ya no es 'final' para que se pueda actualizar.
  LatLng? userLocation;
  final Function(String)? onNavigationRequest;
  final Function(String)? onSpeakRequest;

  ChatbotEvacuacionESPE({
    this.pathFinder,
    this.userLocation,
    this.onNavigationRequest,
    this.onSpeakRequest,
  });

  // --> CORRECCI√ìN 3: Se a√±ade el m√©todo que faltaba para actualizar la ubicaci√≥n.
  void updateLocation(LatLng newLocation) {
    userLocation = newLocation;
  }

  // El resto de tu clase 'ChatbotEvacuacionESPE' se mantiene exactamente igual.
  // Pega aqu√≠ todo el contenido de tu clase desde 'detectarIntencion' hasta el final.

  String detectarIntencion(String texto) {
    texto = texto.toLowerCase();

    // Comandos de navegaci√≥n directa
    if (texto.contains("navegar") ||
        texto.contains("iniciar navegaci√≥n") ||
        texto.contains("empezar ruta"))
      return "iniciar_navegacion";
    if (texto.contains("detener") && texto.contains("navegaci√≥n"))
      return "detener_navegacion";
    if (texto.contains("recalcular") || texto.contains("nueva ruta"))
      return "recalcular_ruta";
    if (texto.contains("ruta") &&
        (texto.contains("cercana") || texto.contains("m√°s cerca")))
      return "ruta_cercana";
    if (texto.contains("zona segura") || texto.contains("√°rea segura"))
      return "zona_segura";
    if (texto.contains("ruta") && texto.contains("segura"))
      return "ruta_segura";
    if (texto.contains("mapa") && texto.contains("rutas")) return "mapa_rutas";
    if (texto.contains("punto de encuentro") ||
        texto.contains("punto encuentro"))
      return "punto_encuentro";
    if (texto.contains("distancia") && texto.contains("zona segura"))
      return "distancia_zona_segura";
    if (texto.contains("tiempo") && texto.contains("llegar"))
      return "tiempo_llegada";
    if (texto.contains("cu√°nto falta") || texto.contains("que tan lejos"))
      return "distancia_restante";
    if (texto.contains("edificio") &&
        (texto.contains("a") ||
            texto.contains("b") ||
            texto.contains("c") ||
            texto.contains("d")))
      return "evacuacion_edificio";
    if (texto.contains("laboratorios") || texto.contains("labs"))
      return "evacuacion_laboratorios";
    if (texto.contains("biblioteca")) return "evacuacion_biblioteca";
    if (texto.contains("comedor") || texto.contains("cafeter√≠a"))
      return "evacuacion_comedor";
    if (texto.contains("auditorio")) return "evacuacion_auditorio";
    if (texto.contains("gimnasio") || texto.contains("coliseo"))
      return "evacuacion_gimnasio";
    if (texto.contains("parqueadero") || texto.contains("parking"))
      return "evacuacion_parqueadero";
    if (texto.contains("cotopaxi") && texto.contains("distancia"))
      return "distancia_volcan";
    if (texto.contains("lahares") || texto.contains("lodo volc√°nico"))
      return "info_lahares";
    if (texto.contains("ceniza volc√°nica") || texto.contains("ca√≠da ceniza"))
      return "info_ceniza";
    if (texto.contains("tiempo") &&
        texto.contains("llegar") &&
        texto.contains("lahar"))
      return "tiempo_lahares";
    if (texto.contains("direcci√≥n") && texto.contains("viento"))
      return "direccion_viento";
    if (texto.contains("medidas") ||
        texto.contains("antes de salir") ||
        texto.contains("preparaci√≥n"))
      return "medidas_previas";
    if (texto.contains("kit") && texto.contains("emergencia"))
      return "kit_emergencia";
    if (texto.contains("tiempo") && texto.contains("evacuar"))
      return "tiempo_evacuacion";
    if (texto.contains("mascarilla") ||
        texto.contains("protecci√≥n respiratoria"))
      return "usar_mascarilla";
    if (texto.contains("sin mascarilla")) return "sin_mascarilla";
    if (texto.contains("ceniza") && texto.contains("proteger"))
      return "proteger_ceniza";
    if (texto.contains("veh√≠culo") ||
        texto.contains("auto") ||
        texto.contains("carro"))
      return "evacuacion_vehicular";
    if (texto.contains("a pie") || texto.contains("caminando"))
      return "evacuacion_pie";
    if (texto.contains("ruta") && texto.contains("bloqueada"))
      return "ruta_bloqueada";
    if (texto.contains("cerrada") || texto.contains("otra ruta"))
      return "ruta_alternativa";
    if (texto.contains("me perd√≠") ||
        texto.contains("perdido") ||
        texto.contains("perdida"))
      return "perdido";
    if (texto.contains("atrapado") || texto.contains("atrapada"))
      return "atrapado";
    if (texto.contains("herido") || texto.contains("lesionado"))
      return "persona_herida";
    if (texto.contains("llamar") ||
        texto.contains("emergencia") ||
        texto.contains("911"))
      return "contacto_emergencia";
    if (texto.contains("autoridades") || texto.contains("polic√≠a"))
      return "contacto_autoridades";
    if (texto.contains("bomberos")) return "contacto_bomberos";
    if (texto.contains("cruz roja")) return "contacto_cruz_roja";
    if (texto.contains("familia") || texto.contains("comunicar"))
      return "comunicar_familia";
    if (texto.contains("espe") && texto.contains("protocolo"))
      return "protocolo_espe";
    if (texto.contains("personal") || texto.contains("empleados"))
      return "info_personal";
    if (texto.contains("estudiantes")) return "info_estudiantes";
    if (texto.contains("clases") || texto.contains("suspensi√≥n"))
      return "suspension_actividades";
    if (texto.contains("transporte p√∫blico")) return "transporte_publico";
    if (texto.contains("salida") && texto.contains("universidad"))
      return "salidas_universidad";
    if (texto.contains("carreteras") || texto.contains("v√≠as"))
      return "estado_vias";
    if (texto.contains("alerta") &&
        (texto.contains("amarilla") ||
            texto.contains("naranja") ||
            texto.contains("roja")))
      return "niveles_alerta";
    if (texto.contains("sem√°foro volc√°nico")) return "semaforo_volcanico";

    return "no_entendido";
  }

  String responder(String intencion) {
    final respuestas = {
      "iniciar_navegacion": _responderIniciarNavegacion(),
      "detener_navegacion":
          "üõë Navegaci√≥n detenida. Puedes reiniciar la navegaci√≥n cuando lo necesites preguntando 'navegar' o presionando el bot√≥n EVACUAR.",
      "recalcular_ruta":
          "üîÑ Recalculando ruta desde tu ubicaci√≥n actual... ${_iniciarRecalculo()}",
      "ruta_cercana": _responderRutaCercana(),
      "zona_segura": _responderZonaSegura(),
      "ruta_segura": _responderRutaSegura(),
      "distancia_zona_segura": _responderDistanciaZonaSegura(),
      "tiempo_llegada": _responderTiempoLlegada(),
      "distancia_restante": _responderDistanciaRestante(),
      "mapa_rutas":
          "üó∫Ô∏è El mapa interactivo muestra:\n‚Ä¢ VERDE: Ruta calculada hacia zona segura\n‚Ä¢ GRIS: Rutas disponibles en el campus\n‚Ä¢ ROJO: Zonas de peligro (lahares)\n‚Ä¢ VERDE (√≠conos): Puntos seguros\n\nPuedes decir 'navegar' para iniciar navegaci√≥n guiada.",
      "punto_encuentro":
          "üìç PUNTOS DE ENCUENTRO OFICIALES:\n‚Ä¢ Principal: Plaza de Armas de Sangolqu√≠\n‚Ä¢ Alternativo 1: Parque La Merced\n‚Ä¢ Alternativo 2: Estadio Rumi√±ahui\n‚Ä¢ Campus: Cancha deportiva (solo temporal)\n\nüí° Di 'navegar' para que te gu√≠e al punto m√°s cercano.",
      "ruta_bloqueada":
          "üöß RUTA BLOQUEADA:\n${_manejarRutaBloqueada()}\n\nüí° Di 'recalcular ruta' para encontrar una alternativa autom√°ticamente.",
      "ruta_alternativa":
          "üîÑ RUTAS ALTERNATIVAS:\n${_mostrarRutasAlternativas()}\n\nüó£Ô∏è Di 'navegar' para que calcule la mejor ruta alternativa desde tu ubicaci√≥n.",
      "perdido":
          "üì± PERDIDO EN EVACUACI√ìN:\n1. MANT√âN LA CALMA\n2. ${_ayudarPersonaPerdida()}\n3. Busca se√±alizaci√≥n naranja de evacuaci√≥n\n4. Llama al 911 si es urgente\n\nüß≠ Di 'navegar' para recalcular ruta desde tu nueva ubicaci√≥n.",
      "evacuacion_edificio": _responderEvacuacionEdificio(),
      "evacuacion_laboratorios":
          "üî¨ LABORATORIOS - PROTOCOLO ESPECIAL:\n1. Apagar equipos seg√∫n procedimiento\n2. Cerrar v√°lvulas de gas\n3. Evacuar por salidas de emergencia\n4. NO regreses por materiales\n\nüó£Ô∏è Una vez fuera, di 'navegar' para dirigirte a zona segura.",
      "evacuacion_biblioteca":
          "üìö BIBLIOTECA ESPE:\n‚Ä¢ Salida principal hacia patio central\n‚Ä¢ Salida de emergencia lateral este\n‚Ä¢ Deja todo y evac√∫a inmediatamente\n\n‚û°Ô∏è Al salir del edificio, di 'navegar' para continuar hacia zona segura.",
      "evacuacion_comedor":
          "üçΩÔ∏è COMEDOR/CAFETER√çA:\n‚Ä¢ Salida principal al patio\n‚Ä¢ Salida trasera hacia parqueaderos\n‚Ä¢ Dirigirse al punto temporal en cancha\n\nüß≠ Desde la cancha, di 'navegar' para la ruta final hacia zona segura.",
      "distancia_volcan":
          "üåã DISTANCIA COTOPAXI-ESPE: 35 km\n‚Ä¢ Tiempo estimado llegada lahares: 45-60 minutos\n‚Ä¢ Ceniza volc√°nica: 15-30 minutos (seg√∫n viento)\n‚Ä¢ Zona de riesgo ALTO para lahares\n\n‚ö° ¬°EVAC√öA INMEDIATAMENTE! Di 'navegar' para ruta de escape.",
      "info_lahares":
          "‚ö†Ô∏è LAHARES (lodo volc√°nico):\n‚Ä¢ Flujos a 60+ km/h por r√≠os y quebradas\n‚Ä¢ Llegan en 45-60 min desde erupci√≥n\n‚Ä¢ NUNCA cruces r√≠os durante evacuaci√≥n\n\nüõ£Ô∏è Mi navegaci√≥n evita autom√°ticamente zonas de lahar. Di 'navegar' para ruta segura.",
      "tiempo_lahares":
          "‚è±Ô∏è TIEMPO CR√çTICO:\n‚Ä¢ Lahares desde Cotopaxi: 45-60 minutos\n‚Ä¢ Evacuaci√≥n ESPE: 20-30 minutos\n‚Ä¢ Ventana de escape: 15-30 minutos\n\nüö® ¬°EVAC√öA YA! Di 'navegar' para navegaci√≥n inmediata.",
      "medidas_previas":
          "üìã MEDIDAS ANTES DE EVACUAR:\n‚úì Mascarilla o pa√±uelo\n‚úì Agua (1 litro m√≠n.)\n‚úì Documentos de identidad\n‚úì Tel√©fono con bater√≠a\n‚úì Medicamentos esenciales\n\nüèÉ‚Äç‚ôÇÔ∏è Una vez listo, di 'navegar' para iniciar evacuaci√≥n guiada.",
      "tiempo_evacuacion": _responderTiempoEvacuacion(),
      "evacuacion_vehicular":
          "üöó EVACUACI√ìN EN VEH√çCULO:\n${_calcularRutaVehicular()}\n\nüó£Ô∏è Di 'navegar' para navegaci√≥n GPS vehicular paso a paso.",
      "evacuacion_pie":
          "üö∂ EVACUACI√ìN A PIE:\n${_calcularRutaPeatonal()}\n\nüëü Di 'navegar' para instrucciones de navegaci√≥n peatonal.",
      "contacto_emergencia":
          "üìû CONTACTOS DE EMERGENCIA:\n‚Ä¢ ECU-911: 911\n‚Ä¢ Bomberos Quito: (02) 266-0000\n‚Ä¢ Cruz Roja: 131\n‚Ä¢ ESPE Seguridad: (02) 398-7500 ext. 5555\n‚Ä¢ SNGRE: 1800-911-911\n\nüß≠ Despu√©s de llamar, di 'navegar' para evacuar.",
      "info_ceniza":
          "üå™Ô∏è CENIZA VOLC√ÅNICA:\n‚Ä¢ Llegada estimada: 15-30 minutos\n‚Ä¢ Peligros: respiratorios, visibilidad\n‚Ä¢ Protecci√≥n: mascarillas N95 o pa√±uelo h√∫medo\n‚Ä¢ Evita conducir con ceniza densa",
      "usar_mascarilla":
          "üò∑ PROTECCI√ìN RESPIRATORIA:\n‚Ä¢ Mascarilla N95: Ideal contra ceniza fina\n‚Ä¢ Mascarilla quir√∫rgica: Protecci√≥n b√°sica\n‚Ä¢ Pa√±uelo h√∫medo: Alternativa de emergencia\n‚Ä¢ Cubre nariz Y boca completamente",
      "sin_mascarilla":
          "üö® SIN MASCARILLA - ALTERNATIVAS:\n1. Pa√±uelo o tela h√∫meda sobre nariz/boca\n2. Camiseta levantada cubriendo respiraci√≥n\n3. Respirar por la nariz (no por boca)\n4. Buscar refugio techado si hay mucha ceniza",
      "proteger_ceniza":
          "ü•Ω PROTECCI√ìN CONTRA CENIZA:\n‚Ä¢ Ojos: Gafas o lentes de seguridad\n‚Ä¢ Respiraci√≥n: Mascarilla N95\n‚Ä¢ Piel: Ropa manga larga, pantal√≥n largo\n‚Ä¢ Cabello: Gorro o capucha\n‚Ä¢ Evita lentes de contacto",
      "atrapado":
          "üÜò PERSONA ATRAPADA:\n1. Llama INMEDIATAMENTE al 911\n2. Proporciona tu ubicaci√≥n exacta\n3. Si hay lesionados, prioriza ayuda m√©dica\n4. Mantente en zona alta y segura\n5. Haz ruido para ser localizado (silbato/gritos)",
      "persona_herida":
          "üöë PERSONA HERIDA:\n1. NO muevas al herido si hay lesi√≥n de columna\n2. Controla hemorragias con presi√≥n directa\n3. Llama inmediatamente al 911\n4. Proporciona primeros auxilios b√°sicos\n5. Espera ayuda m√©dica profesional",
      "protocolo_espe":
          "üèõÔ∏è PROTOCOLO OFICIAL ESPE:\n1. Alarma sonora continua = Evacuaci√≥n inmediata\n2. Personal docente coordina evacuaci√≥n por aulas\n3. Brigadistas con chalecos naranjas gu√≠an rutas\n4. Punto de encuentro temporal: Cancha deportiva\n5. Reporte final en Plaza Sangolqu√≠",
      "niveles_alerta":
          "‚ö†Ô∏è NIVELES DE ALERTA VOLC√ÅNICA:\n‚Ä¢ AMARILLA: Preparaci√≥n y monitoreo\n‚Ä¢ NARANJA: Alistamiento para evacuaci√≥n\n‚Ä¢ ROJA: Evacuaci√≥n inmediata obligatoria\n‚Ä¢ Estado actual: Consulta IGEPN en tiempo real",
      "no_entendido":
          "‚ùì No entend√≠ tu consulta. Comandos disponibles:\n\nüß≠ NAVEGACI√ìN:\n‚Ä¢ 'navegar' - Iniciar navegaci√≥n\n‚Ä¢ 'recalcular ruta' - Nueva ruta\n‚Ä¢ 'detener navegaci√≥n' - Parar gu√≠a\n\nüìç INFORMACI√ìN:\n‚Ä¢ 'zona segura m√°s cercana'\n‚Ä¢ 'cu√°nto falta para llegar'\n‚Ä¢ 'ruta bloqueada'\n‚Ä¢ 'medidas de protecci√≥n'\n‚Ä¢ 'contactos de emergencia'",
    };

    return respuestas[intencion] ?? respuestas["no_entendido"]!;
  }

  String _responderIniciarNavegacion() {
    if (pathFinder == null || userLocation == null) {
      return "‚ùå Sistema de navegaci√≥n no disponible. Verificando ubicaci√≥n GPS...";
    }
    onNavigationRequest?.call("start");
    onSpeakRequest?.call("Iniciando navegaci√≥n hacia zona segura.");
    return "üß≠ INICIANDO NAVEGACI√ìN:\n‚úÖ Calculando ruta m√°s segura desde tu ubicaci√≥n\nüîä Activando instrucciones por voz\nüó∫Ô∏è Sigue la l√≠nea VERDE en el mapa\n\nüó£Ô∏è Mant√©n la app abierta para recibir instrucciones paso a paso.";
  }

  String _iniciarRecalculo() {
    onNavigationRequest?.call("recalculate");
    return "Buscando nueva ruta desde tu posici√≥n actual...";
  }

  String _responderRutaCercana() {
    if (pathFinder == null || userLocation == null) {
      return "üó∫Ô∏è Para mostrarte la ruta m√°s cercana necesito tu ubicaci√≥n GPS. Aseg√∫rate de tener activada la ubicaci√≥n.";
    }
    Node? closestSafe = pathFinder!.findClosestSafePoint(userLocation!);
    if (closestSafe != null) {
      double distance = Geolocator.distanceBetween(
        userLocation!.latitude,
        userLocation!.longitude,
        closestSafe.position.latitude,
        closestSafe.position.longitude,
      );
      return "üéØ ZONA SEGURA M√ÅS CERCANA:\nüìç A ${distance.round()} metros de tu ubicaci√≥n\n‚è±Ô∏è Tiempo estimado: ${_calcularTiempoEstimado(distance)} minutos\n\nüó£Ô∏è Di 'navegar' para recibir instrucciones paso a paso.";
    }
    return "üîç Buscando zona segura m√°s cercana... Di 'navegar' para calcular ruta autom√°ticamente.";
  }

  String _responderZonaSegura() {
    if (pathFinder == null || userLocation == null) {
      return "üõ°Ô∏è ZONAS SEGURAS PRINCIPALES:\n‚Ä¢ Sangolqu√≠ centro (Plaza de Armas)\n‚Ä¢ Parque La Merced\n‚Ä¢ Estadio Rumi√±ahui\n\nüí° Activa tu ubicaci√≥n GPS para calcular distancias exactas.";
    }
    List<Node> safePoints = pathFinder!.safePoints;
    String info = "üõ°Ô∏è ZONAS SEGURAS CERCANAS:\n";
    for (int i = 0; i < safePoints.length && i < 3; i++) {
      double distance = Geolocator.distanceBetween(
        userLocation!.latitude,
        userLocation!.longitude,
        safePoints[i].position.latitude,
        safePoints[i].position.longitude,
      );
      info +=
          "‚Ä¢ Zona ${i + 1}: ${distance.round()}m (${_calcularTiempoEstimado(distance)} min)\n";
    }
    return "$info\nüß≠ Di 'navegar' para ir a la m√°s cercana.";
  }

  String _responderRutaSegura() {
    return "‚úÖ RUTA SEGURA CALCULADA:\nüõ£Ô∏è Mi sistema evita autom√°ticamente:\n‚Ä¢ Zonas de riesgo de lahares\n‚Ä¢ R√≠os y quebradas\n‚Ä¢ √Åreas de ca√≠da de ceniza\n\nüó£Ô∏è Di 'navegar' para navegaci√≥n paso a paso con instrucciones de voz.";
  }

  String _responderDistanciaZonaSegura() {
    if (userLocation == null || pathFinder == null) {
      return "üìè Para calcular la distancia exacta necesito tu ubicaci√≥n GPS. Di 'navegar' para activar navegaci√≥n.";
    }
    return _responderRutaCercana();
  }

  String _responderTiempoLlegada() {
    if (userLocation == null || pathFinder == null) {
      return "‚è∞ Tiempo estimado no disponible sin ubicaci√≥n GPS. Di 'navegar' para calcular ruta y tiempo.";
    }
    Node? closestSafe = pathFinder!.findClosestSafePoint(userLocation!);
    if (closestSafe != null) {
      double distance = Geolocator.distanceBetween(
        userLocation!.latitude,
        userLocation!.longitude,
        closestSafe.position.latitude,
        closestSafe.position.longitude,
      );
      int tiempoPie = _calcularTiempoEstimado(distance);
      int tiempoVehiculo = (tiempoPie * 0.3).round();
      return "‚è∞ TIEMPO ESTIMADO DE LLEGADA:\nüö∂ A pie: $tiempoPie minutos\nüöó En veh√≠culo: $tiempoVehiculo minutos\nüìç Distancia: ${distance.round()} metros\n\nüó£Ô∏è Di 'navegar' para comenzar el recorrido.";
    }
    return "‚è∞ Calculando tiempo de llegada... Di 'navegar' para obtener estimaci√≥n precisa.";
  }

  String _responderDistanciaRestante() {
    return "üìç Para conocer la distancia restante, primero inicia la navegaci√≥n diciendo 'navegar'. Durante el recorrido podr√°s preguntar '¬øcu√°nto falta?' para obtener informaci√≥n actualizada.";
  }

  String _manejarRutaBloqueada() {
    return "1. Recalculando ruta alternativa autom√°ticamente\n2. Buscando caminos seguros disponibles\n3. Evitando la zona bloqueada identificada\n4. Nueva ruta lista para navegaci√≥n";
  }

  String _mostrarRutasAlternativas() {
    return "‚Ä¢ Ruta primaria: Av. General Rumi√±ahui (norte)\n‚Ä¢ Ruta secundaria: V√≠a El Tri√°ngulo (este)\n‚Ä¢ Ruta terciaria: V√≠a Selva Alegre (oeste)\n‚Ä¢ Ruta de emergencia: Sendero Parque La Merced";
  }

  String _ayudarPersonaPerdida() {
    if (userLocation != null) {
      return "Tu ubicaci√≥n GPS detectada: ${userLocation!.latitude.toStringAsFixed(6)}, ${userLocation!.longitude.toStringAsFixed(6)}";
    }
    return "Activando tu ubicaci√≥n GPS para reubicarte...";
  }

  String _responderEvacuacionEdificio() {
    return "üè¢ EVACUACI√ìN POR EDIFICIOS ESPE:\n‚Ä¢ Edificio A: Salida este hacia parqueaderos\n‚Ä¢ Edificio B: Salida norte directa\n‚Ä¢ Edificio C: Salidas laterales este y oeste\n‚Ä¢ Edificio D: Salida sur hacia Av. General Rumi√±ahui\n\n‚û°Ô∏è Una vez fuera del edificio, di 'navegar' para continuar hacia zona segura.";
  }

  String _responderTiempoEvacuacion() {
    if (userLocation != null && pathFinder != null) {
      Node? closestSafe = pathFinder!.findClosestSafePoint(userLocation!);
      if (closestSafe != null) {
        double distance = Geolocator.distanceBetween(
          userLocation!.latitude,
          userLocation!.longitude,
          closestSafe.position.latitude,
          closestSafe.position.longitude,
        );
        int tiempoPersonal = _calcularTiempoEstimado(distance);
        return "‚è∞ TIEMPOS DE EVACUACI√ìN:\n‚Ä¢ Tu tiempo estimado: $tiempoPersonal minutos\n‚Ä¢ Campus completo: 25-30 minutos\n‚Ä¢ Tiempo cr√≠tico disponible: 45-60 minutos\n\n‚úÖ Tienes tiempo suficiente. Di 'navegar' para comenzar.";
      }
    }
    return "‚è∞ TIEMPOS DE EVACUACI√ìN GENERALES:\n‚Ä¢ Edificios ESPE: 15-20 minutos\n‚Ä¢ Campus completo: 25-30 minutos\n‚Ä¢ Hacia zona segura: 30-45 minutos\n‚Ä¢ TOTAL RECOMENDADO: Salir en primeros 20 minutos\n\nüó£Ô∏è Di 'navegar' para tiempo personalizado.";
  }

  String _calcularRutaVehicular() {
    return "‚Ä¢ Ruta recomendada: Av. General Rumi√±ahui hacia norte\n‚Ä¢ Evitar: Puentes sobre r√≠os\n‚Ä¢ Velocidad: Moderada (tr√°fico esperado)\n‚Ä¢ Destino: Sangolqu√≠ centro o m√°s lejos";
  }

  String _calcularRutaPeatonal() {
    return "‚Ä¢ Tiempo estimado: 45-60 min a zona segura\n‚Ä¢ Ruta: Senderos peatonales marcados\n‚Ä¢ Recomendaci√≥n: Calzado cerrado y c√≥modo\n‚Ä¢ Mantente en grupo cuando sea posible";
  }

  int _calcularTiempoEstimado(double distanceInMeters) {
    const double walkingSpeedKmh = 4.0;
    double distanceInKm = distanceInMeters / 1000;
    double timeInHours = distanceInKm / walkingSpeedKmh;
    return (timeInHours * 60).round();
  }

  String obtenerInfoUbicacion(String edificio) {
    final infoEdificios = {
      "edificio_a":
          "Edificio A - Rectorado: Salida principal este, tiempo evacuaci√≥n 8-10 min. Di 'navegar' al salir del edificio.",
      "edificio_b":
          "Edificio B - Aulas: M√∫ltiples salidas, tiempo evacuaci√≥n 5-7 min. Navegaci√≥n disponible desde cualquier salida.",
      "edificio_c":
          "Edificio C - Laboratorios: Protocolo especial, tiempo evacuaci√≥n 10-12 min. Navegaci√≥n post-evacuaci√≥n del edificio.",
      "edificio_d":
          "Edificio D - Biblioteca: Salida controlada, tiempo evacuaci√≥n 6-8 min. Sistema GPS activo para navegaci√≥n externa.",
      "gimnasio":
          "Coliseo: Salidas amplias, tiempo evacuaci√≥n 4-5 min. Di 'navegar' una vez en el exterior.",
      "comedor":
          "Comedor: Salida r√°pida al patio, tiempo evacuaci√≥n 3-4 min. Navegaci√≥n desde patio hacia zona segura disponible.",
    };
    return infoEdificios[edificio] ??
        "Ubicaci√≥n no identificada. Di 'navegar' para calcular ruta desde cualquier punto del campus.";
  }

  bool verificarEstadoEmergencia() {
    return false;
  }
}
